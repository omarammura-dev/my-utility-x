image: golang:1.21-alpine

stages:
  - build
  - build-docker
  - deploy

cache:
  paths:
    - go/pkg/mod

build:
  stage: build
  before_script:
    - apk add --no-cache --upgrade bash
    - apk add --no-cache git
    - apk add --no-cache openssh-client
  script:
    - go mod download
    - go build .

build image:
  stage: build-docker
  image: docker
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker compose up -d --build
    - docker compose push
  only:
    - master

deploy:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    # - "which ssh-agent || ( apk update && apk add openssh-client )"
    # - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    # - mkdir -p ~/.ssh
    # - chmod 700 ~/.ssh
    # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # - ssh $USER@$IP_ADDRESS "mkdir -p /app/backend"
    # - ssh $USER@$IP_ADDRESS "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # # Pull the latest images as per docker-compose.yml
    # - ssh $USER@$IP_ADDRESS "cd /app/backend && docker-compose pull"
    # # Stop, remove, and redeploy containers as per docker-compose.yml
    # - ssh $USER@$IP_ADDRESS "cd /app/backend && docker-compose down"
    # - ssh $USER@$IP_ADDRESS "cd /app/backend && docker-compose up -d --build"
    - scp ./docker-compose.yml $USER@$IP_ADDRESS:/usr/backend/
    - ssh $USER@$IP_ADDRESS "cd /usr/backend/ && docker-compose pull"
    - ssh $USER@$IP_ADDRESS "cd /usr/backend/ && docker-compose up -d --build"
  artifacts:
    paths:
      - myutilityx.com
  only:
    - master
